#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Rono Language –Ω–∞ GitHub

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Rono Language${NC}"
echo "=================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo -e "${YELLOW}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    if ! command -v git &> /dev/null; then
        echo -e "${RED}‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        exit 1
    fi
    
    if ! command -v cargo &> /dev/null; then
        echo -e "${RED}‚ùå Cargo –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
update_version() {
    echo -e "${YELLOW}üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏...${NC}"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ Cargo.toml
    CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
    echo -e "${BLUE}–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $CURRENT_VERSION${NC}"
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π): " NEW_VERSION
    
    if [ -n "$NEW_VERSION" ]; then
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ Cargo.toml
        sed -i.bak "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" Cargo.toml
        rm Cargo.toml.bak 2>/dev/null || true
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ README.md –µ—Å–ª–∏ –µ—Å—Ç—å
        if [ -f README.md ]; then
            sed -i.bak "s/v$CURRENT_VERSION/v$NEW_VERSION/g" README.md
            rm README.md.bak 2>/dev/null || true
        fi
        
        VERSION=$NEW_VERSION
        echo -e "${GREEN}‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ $VERSION${NC}"
    else
        VERSION=$CURRENT_VERSION
        echo -e "${BLUE}–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è $VERSION${NC}"
    fi
}

# –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
build_and_test() {
    echo -e "${YELLOW}üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    cargo build --release
    
    echo -e "${YELLOW}üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...${NC}"
    cargo test
    
    echo -e "${YELLOW}üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞...${NC}"
    ./target/release/rono run interpreter_test_suite/01_basic_types.rono
    ./target/release/rono run interpreter_test_suite/02_structs_methods.rono
    ./target/release/rono run interpreter_test_suite/03_arrays_lists.rono
    
    echo -e "${GREEN}‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
setup_git() {
    echo -e "${YELLOW}üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ git
    if [ ! -d .git ]; then
        git init
        echo -e "${GREEN}‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω${NC}"
    fi
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    git add .
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if git diff --staged --quiet; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞${NC}"
    else
        git commit -m "Release v$VERSION: Complete Rono Language implementation"
        echo -e "${GREEN}‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã${NC}"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
create_tag() {
    echo -e "${YELLOW}üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ v$VERSION...${NC}"
    
    if git tag -l "v$VERSION" | grep -q "v$VERSION"; then
        echo -e "${YELLOW}‚ö†Ô∏è  –¢–µ–≥ v$VERSION —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        read -p "–£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git tag -d "v$VERSION"
            echo -e "${GREEN}‚úÖ –°—Ç–∞—Ä—ã–π —Ç–µ–≥ —É–¥–∞–ª–µ–Ω${NC}"
        else
            echo -e "${YELLOW}–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞${NC}"
            return
        fi
    fi
    
    git tag -a "v$VERSION" -m "Release v$VERSION: Rono Language Interpreter

üöÄ –ü–µ—Ä–≤—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ —è–∑—ã–∫–∞ Rono

‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (int, float, bool, str, nil)
- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –º–µ—Ç–æ–¥—ã
- –ú–∞—Å—Å–∏–≤—ã –∏ —Å–ø–∏—Å–∫–∏ —Å –º–µ—Ç–æ–¥–∞–º–∏
- –¶–∏–∫–ª—ã –∏ —É—Å–ª–æ–≤–∏—è (for, while, if-else)
- –£–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —Å—Å—ã–ª–∫–∏
- –°–∏—Å—Ç–µ–º–∞ –º–æ–¥—É–ª–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤
- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∫–æ–Ω—Å–æ–ª—å, HTTP, —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞)
- –°—Ç—Ä–æ–∫–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è

üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞:
curl -sSL https://raw.githubusercontent.com/yourusername/rono-lang/main/scripts/install.sh | bash"

    echo -e "${GREEN}‚úÖ –¢–µ–≥ v$VERSION —Å–æ–∑–¥–∞–Ω${NC}"
}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
show_publish_instructions() {
    echo ""
    echo -e "${BLUE}üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:${NC}"
    echo "=================================="
    echo ""
    echo -e "${YELLOW}1. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub:${NC}"
    echo "   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/new"
    echo "   - –ù–∞–∑–æ–≤–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: rono-lang"
    echo "   - –°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã–º"
    echo "   - –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å README, .gitignore –∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏–µ–π"
    echo ""
    echo -e "${YELLOW}2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:${NC}"
    echo "   git remote add origin https://github.com/yourusername/rono-lang.git"
    echo "   git branch -M main"
    echo ""
    echo -e "${YELLOW}3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∞ GitHub:${NC}"
    echo "   git push -u origin main"
    echo "   git push origin v$VERSION"
    echo ""
    echo -e "${YELLOW}4. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑ –Ω–∞ GitHub:${NC}"
    echo "   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/yourusername/rono-lang/releases"
    echo "   - –ù–∞–∂–º–∏—Ç–µ 'Create a new release'"
    echo "   - –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ v$VERSION"
    echo "   - –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"
    echo "   - –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Ä–µ–ª–∏–∑"
    echo ""
    echo -e "${YELLOW}5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞–∫–µ—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:${NC}"
    echo "   - Homebrew: —Å–æ–∑–¥–∞–π—Ç–µ tap —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π homebrew-rono"
    echo "   - AUR: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PKGBUILD –≤ AUR"
    echo "   - Crates.io: cargo publish"
    echo ""
    echo -e "${GREEN}üéâ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å Rono!${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_dependencies
    update_version
    build_and_test
    setup_git
    create_tag
    show_publish_instructions
    
    echo ""
    echo -e "${GREEN}üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo -e "${BLUE}–í–µ—Ä—Å–∏—è: v$VERSION${NC}"
    echo -e "${BLUE}–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ GitHub${NC}"
}

# –ó–∞–ø—É—Å–∫
main "$@"